name: MLOps CI/CD Pipeline

# Controls when the action will run. 
# Triggers the workflow on push events but only for the main branch
on:
  push:
    branches: [ main ]

jobs:
  # This workflow contains a single job called "build-and-train"
  build-and-train:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Sets up a Python environment for use in actions
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      # Installs project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[s3] # Install DVC with S3 support

      # Configure AWS credentials to allow DVC to access your S3 bucket
      # You need to set these secrets in your GitHub repository settings
      # (Settings > Secrets and variables > Actions)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change to your S3 bucket's region

      # Pull data and models from DVC remote storage
      - name: DVC Pull
        run: dvc pull

      # Reproduce the DVC pipeline (process data, build features, train model)
      - name: DVC Reproduce
        run: dvc repro

      # The following steps are needed to commit and push DVC changes back
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Commit DVC changes
        run: |
          git add .
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "DVC: Update data, model, and metrics"
          else
            echo "No changes to commit."
          fi

      # Push the updated dvc.lock, params.yaml etc. to the Git repository
      - name: Push DVC metadata to Git
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
      
      # Push the data, models, and metrics tracked by DVC to remote storage
      - name: DVC Push
        run: dvc push

